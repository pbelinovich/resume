1. ранее у нас был сервер кодлеса на nodejs, который хранил конфиги (так мы называем проекты внутри кодлеса, которые могут содержать верстку, интеграцию, логику, роутинг, хранилище и другие проекты) в json файлах. такой подход оказался не самым оптимальным, в больших проектах была заметна скорость записи/чтения из файла в память (память быстро заполнялась, тоже есть в этом свои проблемы). мы с техдиром решили перейти на ravendb, который nosql (чтобы не париться с табличками и связями) и поддерживает транзакции из коробки. все задачи придумывал тех. дир, я реализовавывал:
- запуск "подов" - автоматическое создание и запуск отдельных дочерних процессов в ноде, в которых поднимались серваки по указанному порту, чтобы показать для каждой версии проекта то, что увидит пользователь (то есть мы даем ссылку с портом, пользователь открывает и видит уже как бы билд конфига, реальное рабочее приложение). также ранее в ручную настраивались девопсом такие серваки + прописывались необходимые правила для бэка в nginx конфиге, но я добавил возможность настраивать прокси для каждого пода вручную (перенаправление, смена заголовка, http или ws соединение, таймаут, правила замены путей и тд). 
- создание sse коммуникатора, который позволяет клиенту общаться с сервером посредством sse событий. на серверной стороне были описаны с помощью typescript различные http методы (get, post, channel). коммуникатор с помощью класса proxy в nodejs позволял скрывать в себе адреса http методов и вызывать их просто как: await protectedApiClient.user.GET.byId({ id: "123" }).
- создание главной страницы figma-style без дизайна (у нас не было дизайнера на проекте) - входная точка приложения, проекты оформлены в виде ячеек, все сделано через грид адаптивно для всех экранов (до 1024px по требованиям). поиск + сортировка по алфавиту, дате создания, дате изменения. 
- внедрение понятия "команда" в систему - проектирование и реализация команд, которым предоставлен доступ к проекту. при создании нового проекта была проблема, что каждый раз приходилось добавлять пользователей руками. с этим функционалом 1 раз создают команду, в ней присваивают всем пользователям роли и потом при создании проекта нужно 1 раз просто добавить команду, чтобы все пользователя, находящиеся в ней, видели проект относительно своих ролей. команда может содержать не только пользователей, но и другие команды рекурсивно. в проекте также можно при переопределять роли, указанные в команде, при добавлении в проект руками (и будет подсвечиваться индикатор об этом).
- внедрение понятия "группа проектов" в систему - из-за того, что входная точка приложения - это figma-style иконки проектов, и их может быть слишком много для одной страницы, было принято решение создать отдельную сущность группы проектов, которые могут содержать в себе как проекты, так и другие группы проектов рекурсивно. проектирование и реализация мои. на главной странице теперь можно "проваливаться внутрь" группы, будут рисоваться хлебные крошки, урл меняется в зависимости от глубины группы проекта.
- вынес валидацию конфигов проектов и проверку актуальности интеграций с бэкендом в отдельный дочерний процесс для оптимизации - валидация больших конфигов добавляла значительную нагрузку на основной процесс сервера, а также проверка актуальности метаданных (методы бэкенда и их типы берем со сваггера и интегрируем в приложение, создаваемое в кодлесс) тоже являлась фоновым процессом, не требующим работы в основном процессе. все вынес отдельный процесс и повесил крон. создал понятие так называемых джоб.
- разработал репозитории для работы с данными в ravendb/оперативной памятью - два разных репозитория, которые при создании наследуют общие абстрактные классы и реализуют общие интерфейсы для работы с данными. какая-то часть данных должна лежать в бд, какая-то в памяти. у каждой сущности создается свой репозиторий. репозитории эти доступны в экшенах экзекьютера. с помощью экшенов реализуется вся бизнес логика приложения кодлесс. репозитории спроектированы и реализованы мной под присмотром тех. дира. также в репозитории для работы с памятью мной был реализован механизм транзакций (складывания событий в цепочку и возврат их в случае ошибки при работе с данными). а в целом репозитории были созданы для того, чтобы обернуть порой спорные моменты реализации работы с данными от ravendb в nodejs. и предоставление программисту полной типизации во время работы с репозиторием определенной сущности.

2. 
- NodeJS
- Typescript
- Express
- Telegraph
- RavenDB
- Webpack
- Mistral 7b (дообученный с помощью lora, fp16, квантование q4_k_m, запуск через ollama) - я загенерил с помощью дипсика и бесплатной версии чата джипити порядка 1500 данных. почему именно mistral? моя цель была в том, чтобы сделать сервис бесплатным и не платить ни за что самому, кроме электричества. у меня, тк я в прошлом игрок, есть игровой пк (с 4070ti на борту), и мне нужно было запихнуть в 12gb видеопамяти нейронку, которая сможет из строки пользователя (списка продуктов) собрать массив данных в json с полями "name", "quantity" и "priceCategory". вторая проблема - mistral, помимо того, что в принципе генерировал с обычным промтом не всегда валидный json и порой выдумывал несуществующие данные, тк он еще и напрочь отказался правильно воспринимать строки типа "яйца с0, десяток яиц" и все тому подобное, что связано с яйцами (и это не шутка, так и было). пришлось разбираться в дообучении (я арендовал бесплатно по акции в selectel сервер с rtx 4090 на некоторое время) и объяснять mistral, как правильно работать. в результате mistral улучшил output и понимание яиц, но все равно результаты пока не 100%. понимаю, что для этого нужно больше обучающих данных, но пока остановился на таком результате. возможно позже вернусь к дообучению и добью до приемлемого результата.

фишки:
- как найти самое дешевое молоко среди всех магазинов (пятерочки, магнита, дикси, перекрестка и тп)? нужно зайти на сайт каждого магазина или агрегатора, вбить молоко и сравнивать вручную. тг бот позволяет просто написать "самое дешевое молоко 3.2%" и система выдаст корзины с самым дешевым молоком, отсортированным магазинами по возрастанию.
- я домохозяйка, каждую неделю составляю меню для готовки на семью и список продуктов. я хочу экономить и хочу знать, в каком магазине есть все, что мне нужно, чтобы не бегать по разным магазинам и не тратить время. как мне это узнать? в тг боте просто вбиваешь "молоко 3.2%, хлеб, яйца дорогие, чипсы lays" и тебе выдает магазины с уже собранными корзинами. не понравился продукт? меняешь прямо в тг сообщении на любой другой из той же категории.
- я импульсивный покупатель и могу напокупать кучу мне ненужного, если вижу красивые картинки в момент поиска товара и оформления корзины. как мне купить только то, что мне необходимо без импульсивных покупок? тг бот ничего не предложит лишнего, проект полностью бесплатный и не монитизируемый.

3. я писал про весь свой опыт, который включал в себя и разработку фронта, и работу с бэкендом (чужим/своим). в дбо системах самое сложное - это формы с множеством полей и несколькими шагами. каждая форма должна валидироваться частично на фронте + полностью на бэкенде. бэкенд писал не я, но я обрабатывал ошибки от бэкенда и показывал их красиво на фронте. данные со скроллерами (тамбличками), модальные окна, справочники - этого очень много в дбо системах и они являются основой приложений.

4. на nodejs находится сервер codeless. в частично занимался какими-то задачами и на сервере до миграции, они должны были в резюме быть описаны. сейчас уже и не вспомню. react native продакшн проект был только госуслуги хмао, если не ошибаюсь. или вообще там был бэкбон. не помню. вот paycontrol точно была задача, пришел заказчик и попросил в систему внедрить работу с этим модулем. но это было очень давно, деталей почти не помню. 